import re
import json
import textwrap
import os
from PIL import Image, ImageDraw, ImageFont

def extract_json(text: str):
    """Find and parse the first top-level JSON object in `text` robustly."""
    if not text or "{" not in text:
        raise ValueError("No JSON object found in text")

    start = text.find("{")
    depth = 0
    for i in range(start, len(text)):
        ch = text[i]
        if ch == "{":
            depth += 1
        elif ch == "}":
            depth -= 1
            if depth == 0:
                candidate = text[start:i+1]
                try:
                    return json.loads(candidate)
                except Exception:
                    # try next '{' occurrence
                    nxt = text.find("{", start+1)
                    if nxt == -1:
                        break
                    start = nxt
                    depth = 0
    # final attempt: parse entire text
    try:
        return json.loads(text)
    except Exception as e:
        raise ValueError(f"Could not parse JSON from model response: {e}")

def ensure_lists(d: dict, num_ideas=5):
    """Ensure expected keys are lists length == num_ideas (pad with empty strings)."""
    keys = ["headlines", "primary_text", "ctas", "visual_prompts"]
    out = {}
    for k in keys:
        v = d.get(k, [])
        if not isinstance(v, list):
            # If model returned a block, try to split by lines
            if isinstance(v, str) and ("\n" in v):
                v = [line.strip() for line in v.splitlines() if line.strip()]
            else:
                v = [str(v)]
        cleaned = [str(x).strip() for x in v][:num_ideas]
        while len(cleaned) < num_ideas:
            cleaned.append("")
        out[k] = cleaned
    return out

def make_unique_lists(d: dict, num_ideas=5):
    """
    Ensure items inside each list are unique. If duplicates found, attempt lightweight programmatic
    variations (append short adjectives/hooks) to make them distinct.
    """
    # simple modifiers to help create variety
    primary_mods = ["Try this approach.", "Limited time offer.", "See results fast.", "Clinically proven."]
    cta_alts = ["Shop now", "Try free", "Learn more", "Get yours", "Book a demo"]
    visual_mods = ["minimal hero shot", "close-up product shot", "lifestyle scene", "flat-lay with props",
                   "before/after comparison", "bold typographic layout"]

    keys = ["headlines", "primary_text", "ctas", "visual_prompts"]
    for k in keys:
        lst = d.get(k, [])
        new_lst = []
        seen = set()
        for i, item in enumerate(lst):
            txt = (item or "").strip()
            # ensure non-empty placeholder
            if not txt:
                txt = f"(No {k} provided #{i+1})"
            # if duplicate, mutate
            base = txt
            attempt = 0
            while txt in seen:
                attempt += 1
                if k == "primary_text":
                    mod = primary_mods[(i + attempt) % len(primary_mods)]
                    txt = base + " " + mod
                elif k == "ctas":
                    txt = cta_alts[(i + attempt) % len(cta_alts)]
                elif k == "visual_prompts":
                    txt = base + ", " + visual_mods[(i + attempt) % len(visual_mods)]
                else:  # headlines
                    txt = f"{base} ({attempt+1})"
                if attempt > 6:
                    # give up after several tries
                    txt = f"{base} #{i+1}"
                    break
            seen.add(txt)
            new_lst.append(txt)
        # pad if necessary
        while len(new_lst) < num_ideas:
            new_lst.append("")
        d[k] = new_lst[:num_ideas]
    return d

def wrap_text(text, width=28):
    return "\n".join(textwrap.wrap(text, width=width))

def make_placeholder_image(text: str, out_path: str, size=(1024, 1024)):
    """Create a placeholder image with wrapped text and footer; compatible with modern Pillow."""
    img = Image.new("RGB", size, (245, 245, 245))
    draw = ImageDraw.Draw(img)

    padding = 40
    rect_color = (230, 230, 230)
    draw.rectangle([padding, padding, size[0]-padding, size[1]-padding], fill=rect_color, outline=(200,200,200), width=4)

    try:
        font = ImageFont.truetype("DejaVuSans-Bold.ttf", 56)
        font_small = ImageFont.truetype("DejaVuSans.ttf", 40)
    except Exception:
        font = ImageFont.load_default()
        font_small = ImageFont.load_default()

    lines = wrap_text(text, width=30).split("\n")
    y = padding + 30
    for i, line in enumerate(lines[:8]):
        draw.text((padding + 30, y), line, fill=(20, 20, 20), font=(font if i==0 else font_small))
        y += 80 if i == 0 else 56

    footer = "Generated by Ad Creative Idea Generator"
    try:
        bbox = draw.textbbox((0,0), footer, font=font_small)
        footer_width = bbox[2] - bbox[0]
        footer_height = bbox[3] - bbox[1]
    except AttributeError:
        footer_width, footer_height = draw.textsize(footer, font=font_small)
    draw.text((size[0] - footer_width - 30, size[1] - footer_height - 30), footer, fill=(100,100,100), font=font_small)

    os.makedirs(os.path.dirname(out_path) or ".", exist_ok=True)
    img.save(out_path)
    return out_path
